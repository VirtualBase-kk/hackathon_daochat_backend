type VoteOptions {
  id: ID
  name: String
  description: String
}

type VoteResult @model @auth(rules: [{allow: public}]) {
  id: ID!
  Vote: Vote @hasOne
  User: OrganizationUser @hasOne
  options: VoteOptions
}

type Vote @model @auth(rules: [{allow: public}]) {
  id: ID!
  title: String
  options: VoteOptions
}

type Chat @model @auth(rules: [{allow: public}]) {
  id: ID!
  text: String
  status: String
  sendUser: OrganizationUser @hasOne
  sendSpace: ChatSpase @hasOne
}

type ChatSpase @model @auth(rules: [{allow: public}]) {
  id: ID!
  organization: Organization @hasOne
  name: String
  description: String
  discussionFlag: Boolean
  joinUsers: [OrganizationUser] @hasMany(indexName: "byChatSpase", fields: ["id"])
}

enum OrganizationUserStatus {
  INVITE
  ACTIVE
  FROZEN
}

type OrganizationUser @model @auth(rules: [{allow: public}]) {
  id: ID!
  status: OrganizationUserStatus
  user: GrobalUser @hasOne
  organization: Organization @hasOne
  name: String
  chatspaseID: ID! @index(name: "byChatSpase")
}

type GrobalUser @model @auth(rules: [{allow: public}]) {
  id: ID!
  emailAddress: AWSEmail
  walletAddress: String
}

type Organization @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  subdomain: String
}
