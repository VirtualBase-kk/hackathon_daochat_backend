AWSTemplateFormatVersion: "2010-09-09"
Description: "Code for Lambda"
Parameters:
  ServiceName:
    Type: String
    Default: daochat
  OriginDomain:
    Type: String
  CommonBucketName:
    Type: String
  LambdaRoleArn:
    Type: String

Resources:
  adminApi:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ServiceName}-Admin-Api"
      Code:
        S3Bucket: !Ref CommonBucketName
        S3Key: handler.zip
      Handler: index.handler
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs18.x"
      Environment:
        Variables:
          ORIGIN: !Sub "${OriginDomain}"
          SERVICE_NAME: !Sub "${ServiceName}"
  chatApi:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ServiceName}-Chat-Api"
      Code:
        S3Bucket: !Ref CommonBucketName
        S3Key: handler.zip
      Handler: index.handler
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs18.x"
      Environment:
        Variables:
          ORIGIN: !Sub "${OriginDomain}"
          SERVICE_NAME: !Sub "${ServiceName}"
  todoApi:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ServiceName}-Todo-Api"
      Code:
        S3Bucket: !Ref CommonBucketName
        S3Key: handler.zip
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs18.x"
      Handler: index.handler
      Environment:
        Variables:
          ORIGIN: !Sub "${OriginDomain}"
          SERVICE_NAME: !Sub "${ServiceName}"
  userApi:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ServiceName}-User-Api"
      Code:
        S3Bucket: !Ref CommonBucketName
        S3Key: handler.zip
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs18.x"
      Handler: index.handler
      Environment:
        Variables:
          ORIGIN: !Sub "${OriginDomain}"
          SERVICE_NAME: !Sub "${ServiceName}"
          SECRET_NAME: !Sub "${ServiceName}-JWT-SECRET"
  walletLoginCreateAuthCallenge:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ServiceName}-wallet_login_create_auth_callenge-function"
      Code:
        S3Bucket: !Ref CommonBucketName
        S3Key: handler.zip
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs18.x"
      Handler: index.handler
      Environment:
        Variables:
          SECRET_NAME: !Sub "${ServiceName}-JWT-SECRET"
  walletLoginDefineAuthChallenge:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ServiceName}-wallet_login_define_auth_challenge-function"
      Code:
        S3Bucket: !Ref CommonBucketName
        S3Key: handler.zip
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs18.x"
      Handler: index.handler
      Environment:
        Variables:
          SECRET_NAME: !Sub "${ServiceName}-JWT-SECRET"
  walletLoginPreSignup:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ServiceName}-wallet_login_pre_signup-function"
      Code:
        S3Bucket: !Ref CommonBucketName
        S3Key: handler.zip
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs18.x"
      Handler: index.handler
      Environment:
        Variables:
          SECRET_NAME: !Sub "${ServiceName}-JWT-SECRET"
  walletLoginVerifyAuthChallenge:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ServiceName}-wallet_login_verify_auth_challenge-function"
      Code:
        S3Bucket: !Ref CommonBucketName
        S3Key: handler.zip
      Role: !Ref LambdaRoleArn
      Runtime: "nodejs18.x"
      Handler: index.handler
      Environment:
        Variables:
          SECRET_NAME: !Sub "${ServiceName}-JWT-SECRET"